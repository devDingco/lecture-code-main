import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import ApiProvider from "@/commons/providers/13-04-api-provider";
import Layout from "@/commons/layout";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--철수의폰트변수",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--글로벌폰트변수",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// interface IProfile {
//   name: string;
//   age: number;
//   school: string;
// }
interface IProps {
  children: React.ReactNode;
}
export default function RootLayout({ children }: IProps) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <div>=========== 여기 위는 레이아웃 입니다. ===========</div>
        {/* 06-02) 내가접속한페이지에 Apollo(graphql 기능 보따리) 셋팅하기  */}
        {/* <ApolloSetting 내가접속한페이지={children} /> */}

        {/* 13-02) 커스텀 레이아웃 */}
        {/* <Layout>
          <ApolloSetting 내가접속한페이지={children} />
        </Layout> */}

        {/* 13-04) 1. 레이아웃도 Graphql 가능하도록 셋팅 변경하기 */}
        {/* <ApolloSetting 내가접속한페이지={<Layout>{children}</Layout>} /> */}

        {/* 13-04) 2. props로 JSX넘기기: children 1번째 방법 */}
        {/* <ApolloSetting children={<Layout>{children}</Layout>} /> */}

        {/* 13-04) 3. props로 JSX넘기기: children 2번째 방법 */}
        {/* <ApolloSetting>
          <Layout>{children}</Layout>
        </ApolloSetting> */}

        {/* 13-04) 4. 실무형 컴포넌트 합성 */}
        <ApiProvider>
          <Layout>{children}</Layout>
        </ApiProvider>

        <div>=========== 여기 아래는 레이아웃 입니다. ===========</div>
      </body>
    </html>
  );
}

// 13-01) 페이지 접속시 작동 원리
// 1. 게시판 페이지에 접속
// 2. 내부적으로 루트레이아웃이 실행됨
//    <RootLayout>
//      <BoardsPage />    => 페이지 컴포넌트
//    </RootLayout>;
